generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  name           String?
  password       String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  type           UserType         @default(PLAYER)
  phone          String?
  position       Position?        @map("position")
  observations   String?
  deletedAt      DateTime?        @map("deleted_at")
  favoritedBy    PlayerFavorite[] @relation("Favorite")
  voterFavorites PlayerFavorite[] @relation("Voter")
  playerSessions PlayerSession[]

  @@map("users")
}

model Season {
  id          Int       @id @default(autoincrement())
  startDate   DateTime  @map("start_date")
  endDate     DateTime  @map("end_date")
  description String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  sessions    Session[]
}

model Session {
  id              Int              @id @default(autoincrement())
  seasonId        Int?             @map("season_id")
  date            DateTime
  location        String
  status          SessionStatus    @default(SCHEDULED)
  notes           String?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  playerFavorites PlayerFavorite[]
  playerSessions  PlayerSession[]
  teams           Team[]
  season          Season?           @relation(fields: [seasonId], references: [id])

  @@map("sessions")
}

model Team {
  id             Int             @id @default(autoincrement())
  name           String
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  sessionId      Int?            @map("session_id")
  deletedAt      DateTime?       @map("deleted_at")
  playerSessions PlayerSession[]
  session        Session?        @relation(fields: [sessionId], references: [id])
  captainId      Int?            @unique @map("captain_id")
  captain        PlayerSession?  @relation("TeamCaptain", fields: [captainId], references: [id])

  @@map("teams")
}

model PlayerSession {
  id             Int       @id @default(autoincrement())
  confirmed      Boolean   @default(false)
  goals          Int       @default(0)
  assists        Int       @default(0)
  statsSubmitted Boolean   @default(false) @map("stats_submitted")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  userId         Int       @map("user_id")
  sessionId      Int       @map("session_id")
  teamId         Int?      @map("team_id")
  willPlay       Boolean   @default(true)
  deletedAt      DateTime? @map("deleted_at")
  session        Session   @relation(fields: [sessionId], references: [id])
  team           Team?     @relation(fields: [teamId], references: [id])
  user           User      @relation(fields: [userId], references: [id])
  captainOf      Team?     @relation("TeamCaptain")

  @@unique([userId, sessionId])
  @@map("player_sessions")
}

model PlayerFavorite {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  sessionId  Int       @map("session_id")
  voterId    Int       @map("voter_id")
  favoriteId Int       @map("favorite_id")
  deletedAt  DateTime? @map("deleted_at")
  favorite   User      @relation("Favorite", fields: [favoriteId], references: [id])
  session    Session   @relation(fields: [sessionId], references: [id])
  voter      User      @relation("Voter", fields: [voterId], references: [id])

  @@map("player_favorites")
}

enum UserType {
  PLAYER
  ADMIN
}

enum Position {
  DEFENDER
  MIDFIELDER
  FORWARD
  GOALKEEPER
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  name           String?
  password       String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  type           UserType         @default(PLAYER)
  phone          String?
  position       Position?        @map("position")
  observations   String?
  deletedAt      DateTime?        @map("deleted_at")
  favoritedBy    PlayerFavorite[] @relation("Favorite")
  voterFavorites PlayerFavorite[] @relation("Voter")
  playerSessions PlayerSession[]

  @@map("users")
}

model Session {
  id              Int              @id @default(autoincrement())
  date            DateTime
  location        String
  status          SessionStatus    @default(SCHEDULED)
  notes           String?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  gameResult      GameResult?
  playerFavorites PlayerFavorite[]
  playerSessions  PlayerSession[]
  teams           Team[]

  @@map("sessions")
}

model Team {
  id              Int              @id @default(autoincrement())
  name            String
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  sessionId       Int?             @map("session_id")
  deletedAt       DateTime?        @map("deleted_at")
  teamAGames      GameResult[]     @relation("TeamA")
  teamBGames      GameResult[]     @relation("TeamB")
  winnerGames     GameResult[]     @relation("WinnerTeam")
  playerFavorites PlayerFavorite[]
  playerSessions  PlayerSession[]
  session         Session?         @relation(fields: [sessionId], references: [id])
  captainId       Int?            @unique @map("captain_id") // ID do capit√£o
  captain         PlayerSession?   @relation("TeamCaptain", fields: [captainId], references: [id])

  @@map("teams")
}

model PlayerSession {
  id        Int       @id @default(autoincrement())
  confirmed Boolean   @default(false)
  goals     Int       @default(0)
  assists   Int       @default(0)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  userId    Int       @map("user_id")
  sessionId Int       @map("session_id")
  teamId    Int?      @map("team_id")
  willPlay  Boolean   @default(true)
  deletedAt DateTime? @map("deleted_at")
  session   Session   @relation(fields: [sessionId], references: [id])
  team      Team?     @relation(fields: [teamId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  captainOf Team?     @relation("TeamCaptain")

  @@unique([userId, sessionId])
  @@map("player_sessions")
}

model GameResult {
  id           Int       @id @default(autoincrement())
  teamAScore   Int       @default(0) @map("team_a_score")
  teamBScore   Int       @default(0) @map("team_b_score")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  sessionId    Int       @unique @map("session_id")
  teamAId      Int       @map("team_a_id")
  teamBId      Int       @map("team_b_id")
  winnerTeamId Int?      @map("winner_team_id")
  deletedAt    DateTime? @map("deleted_at")
  session      Session   @relation(fields: [sessionId], references: [id])
  teamA        Team      @relation("TeamA", fields: [teamAId], references: [id])
  teamB        Team      @relation("TeamB", fields: [teamBId], references: [id])
  winnerTeam   Team?     @relation("WinnerTeam", fields: [winnerTeamId], references: [id])

  @@map("game_results")
}

model PlayerFavorite {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  sessionId  Int       @map("session_id")
  voterId    Int       @map("voter_id")
  favoriteId Int       @map("favorite_id")
  teamId     Int       @map("team_id")
  deletedAt  DateTime? @map("deleted_at")
  favorite   User      @relation("Favorite", fields: [favoriteId], references: [id])
  session    Session   @relation(fields: [sessionId], references: [id])
  team       Team      @relation(fields: [teamId], references: [id])
  voter      User      @relation("Voter", fields: [voterId], references: [id])

  @@unique([sessionId, voterId, favoriteId])
  @@map("player_favorites")
}

enum UserType {
  PLAYER
  ADMIN
}

enum Position {
  DEFENDER
  MIDFIELDER
  FORWARD
  GOALKEEPER
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}
